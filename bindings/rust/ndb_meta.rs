// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum NdbEventMetaOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct NdbEventMeta<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for NdbEventMeta<'a> {
  type Inner = NdbEventMeta<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> NdbEventMeta<'a> {
  pub const VT_RECEIVED_AT: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    NdbEventMeta { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args NdbEventMetaArgs
  ) -> flatbuffers::WIPOffset<NdbEventMeta<'bldr>> {
    let mut builder = NdbEventMetaBuilder::new(_fbb);
    builder.add_received_at(args.received_at);
    builder.finish()
  }


  #[inline]
  pub fn received_at(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(NdbEventMeta::VT_RECEIVED_AT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for NdbEventMeta<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("received_at", Self::VT_RECEIVED_AT, false)?
     .finish();
    Ok(())
  }
}
pub struct NdbEventMetaArgs {
    pub received_at: i32,
}
impl<'a> Default for NdbEventMetaArgs {
  #[inline]
  fn default() -> Self {
    NdbEventMetaArgs {
      received_at: 0,
    }
  }
}

pub struct NdbEventMetaBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> NdbEventMetaBuilder<'a, 'b> {
  #[inline]
  pub fn add_received_at(&mut self, received_at: i32) {
    self.fbb_.push_slot::<i32>(NdbEventMeta::VT_RECEIVED_AT, received_at, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> NdbEventMetaBuilder<'a, 'b> {
    let start = _fbb.start_table();
    NdbEventMetaBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<NdbEventMeta<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for NdbEventMeta<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("NdbEventMeta");
      ds.field("received_at", &self.received_at());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `NdbEventMeta`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_ndb_event_meta_unchecked`.
pub fn root_as_ndb_event_meta(buf: &[u8]) -> Result<NdbEventMeta, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<NdbEventMeta>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `NdbEventMeta` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_ndb_event_meta_unchecked`.
pub fn size_prefixed_root_as_ndb_event_meta(buf: &[u8]) -> Result<NdbEventMeta, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<NdbEventMeta>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `NdbEventMeta` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_ndb_event_meta_unchecked`.
pub fn root_as_ndb_event_meta_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<NdbEventMeta<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<NdbEventMeta<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `NdbEventMeta` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_ndb_event_meta_unchecked`.
pub fn size_prefixed_root_as_ndb_event_meta_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<NdbEventMeta<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<NdbEventMeta<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a NdbEventMeta and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `NdbEventMeta`.
pub unsafe fn root_as_ndb_event_meta_unchecked(buf: &[u8]) -> NdbEventMeta {
  flatbuffers::root_unchecked::<NdbEventMeta>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed NdbEventMeta and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `NdbEventMeta`.
pub unsafe fn size_prefixed_root_as_ndb_event_meta_unchecked(buf: &[u8]) -> NdbEventMeta {
  flatbuffers::size_prefixed_root_unchecked::<NdbEventMeta>(buf)
}
#[inline]
pub fn finish_ndb_event_meta_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<NdbEventMeta<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_ndb_event_meta_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<NdbEventMeta<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
